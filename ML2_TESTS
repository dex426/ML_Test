# This file is for ML2 Unit Tests
###########################################################

# Questions 1-5: 
If output is matched assume all is correct/

#############################################################
# Question 1
test_preds = np.array([0.1, 0.5, 0.2, 0.8, 0.0])
test_targets = np.array([1, 1, -1, 1, -1])

TP = true_positive_rate(test_preds,test_targets)
FP = false_positive_rate(test_preds,test_targets)

TP == [0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 1.0, 1.0]
FP == [0.0, 0.0, 0.5, 0.5, 1.0]

############################################################
# After Question 5 Checkpoint

# Value is approx 2330?
np.sum(compute_scores(train_rf, score_rf, 5, X_train, y_train, X_test, num=100))


############################################################
# Question 8 

Optimal solution found.
[[5.00000003]
 [5.00000002]] 6.875000051639771

Output image has 4 lines
############################################################
# Question 14 

from sklearn.datasets import make_classification
X,y = make_classification(n_samples=100, n_features=2, n_informative=2, n_redundant=0, n_repeated=0, n_classes=2, n_clusters_per_class=2, weights=None, flip_y=0.0, class_sep=1.0, random_state=5)
y[y==0]=-1

model = train_slmkc(X, y, C=1e2, kernel_function=linear_kernel_function, param=None)
compute_bias(kernel_function=linear_kernel_function,param=None,C=1e2,model=model) - 2.57487613 <1e-5

model = train_slmkc(X, y, C=1e3, kernel_function=polynomial_kernel_function, param=5)
compute_bias(kernel_function=linear_kernel_function,param=None,C=1e2,model=model) - 0.25000002 <1e-5

############################################################
# Question 17/18

# Note transpose is not needed due to single dimension
# np.dot will auto transpose if its needed. 

# Question 17 
np.dot(x1, x2.T).astype(float)

# Question 18
((1 + np.dot(x1, x2.T).astype(float)) ** param).astype(float)

############################################################


#############################################################
# Question 23

# test func
def padding_repeating2(M, length):
    return np.pad(M, ((length,length),(length,length)),'edge')

test = np.random.rand(1,8)
np.mean(padding_repeating2(test,7) == padding_repeating(test,7)) == 1.0

test = np.random.rand(5,5)
np.mean(padding_repeating2(test,3) == padding_repeating(test,3)) == 1.0

test = np.random.rand(2,7)
np.mean(padding_repeating2(test,2) == padding_repeating(test,2)) == 1.0

kk = np.random.rand(7,3)
np.mean(padding_repeating2(kk,1) == padding_repeating(kk,1)) == 1.0

#############################################################
# Question 24

k1 = np.ones((3,3))
im1 = np.arange(25).reshape((5,5))

cross_correlation2D(im1,k1,padding_repeating).sum() == 2700

k1 = np.ones((5,5))
im1 = np.arange(25).reshape((5,5))

cross_correlation2D(im1,k1,padding_repeating).sum() == 7500

##############################################################
# Question 25
# This one is more of a visual check
# np.shape = z,x,y !


test2 = np.ones((5,3,3))
np.sum(padding_zeros_3D(test2,1)) == 45


##############################################################
# Question 26

see final check

##############################################################
# Question 27 

make_averaging_kernel(1, 5) == np.ones((1,5))/5
make_averaging_kernel(2, 5) == np.ones((5,5))/5**2
make_averaging_kernel(3, 5) == np.ones((5,5,5))/5**3

################################################################
# FINAL CHECK 

from PIL import Image
from scipy.signal import correlate
kernel = make_averaging_kernel(n_dim=3, length=7)
image = np.array(Image.open('fish.jpeg')).astype(int)
correct = correlate(image,kernel,mode='same')
out = cross_correlation3D(image, kernel, padding_zeros_3D)
assert ((correct - out)<1e-3).all(), 'Incorrect solution'


